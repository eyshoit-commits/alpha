{
  "openapi": "3.0.3",
  "info": {
    "title": "Cave Daemon API",
    "version": "0.1.0",
    "description": "REST interface for managing sandboxes, executing workloads, and issuing API keys. See docs/api.md for narrative documentation."
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development"
    }
  ],
  "tags": [
    {
      "name": "Operations",
      "description": "Health and telemetry endpoints."
    },
    {
      "name": "Sandboxes",
      "description": "Sandbox lifecycle management."
    },
    {
      "name": "Auth",
      "description": "API key issuance and revocation."
    }
  ],
  "paths": {
    "/healthz": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Health probe",
        "operationId": "getHealthz",
        "responses": {
          "200": {
            "description": "Service is healthy"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Prometheus metrics",
        "operationId": "getMetrics",
        "responses": {
          "200": {
            "description": "Metrics payload",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "# metrics\nbkg_cave_daemon_up 1\n"
              }
            }
          }
        }
      }
    },
    "/api/v1/sandboxes": {
      "post": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "Create a sandbox",
        "operationId": "createSandbox",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSandboxRequest"
              },
              "example": {
                "namespace": "demo",
                "name": "runner",
                "runtime": "process",
                "limits": {
                  "cpu_millis": 750,
                  "memory_mib": 1024,
                  "disk_mib": 1024,
                  "timeout_seconds": 120
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sandbox created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxResponse"
                },
                "example": {
                  "id": "9f9c9872-2d9c-4c25-9c36-4e45be927834",
                  "namespace": "demo",
                  "name": "runner",
                  "runtime": "process",
                  "status": "created",
                  "limits": {
                    "cpu_millis": 750,
                    "memory_mib": 1024,
                    "disk_mib": 1024,
                    "timeout_seconds": 120
                  },
                  "created_at": "2025-10-18T12:34:56Z",
                  "updated_at": "2025-10-18T12:34:56Z",
                  "last_started_at": null,
                  "last_stopped_at": null
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "namespace query parameter is required"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 'runner' already exists in namespace 'demo'"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "List sandboxes in a namespace",
        "operationId": "listSandboxes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Namespace identifier to filter sandboxes."
          }
        ],
        "responses": {
          "200": {
            "description": "Sandboxes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SandboxResponse"
                  }
                },
                "example": [
                  {
                    "id": "9f9c9872-2d9c-4c25-9c36-4e45be927834",
                    "namespace": "demo",
                    "name": "runner",
                    "runtime": "process",
                    "status": "created",
                    "limits": {
                      "cpu_millis": 750,
                      "memory_mib": 1024,
                      "disk_mib": 1024,
                      "timeout_seconds": 120
                    },
                    "created_at": "2025-10-18T12:34:56Z",
                    "updated_at": "2025-10-18T12:34:56Z",
                    "last_started_at": null,
                    "last_stopped_at": null
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "namespace query parameter is required"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sandboxes/{id}/status": {
      "get": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "Inspect sandbox",
        "operationId": "getSandbox",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxResponse"
                },
                "example": {
                  "id": "9f9c9872-2d9c-4c25-9c36-4e45be927834",
                  "namespace": "demo",
                  "name": "runner",
                  "runtime": "process",
                  "status": "created",
                  "limits": {
                    "cpu_millis": 750,
                    "memory_mib": 1024,
                    "disk_mib": 1024,
                    "timeout_seconds": 120
                  },
                  "created_at": "2025-10-18T12:34:56Z",
                  "updated_at": "2025-10-18T12:34:56Z",
                  "last_started_at": null,
                  "last_stopped_at": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sandboxes/{id}/start": {
      "post": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "Start a sandbox",
        "operationId": "startSandbox",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxResponse"
                },
                "example": {
                  "id": "9f9c9872-2d9c-4c25-9c36-4e45be927834",
                  "namespace": "demo",
                  "name": "runner",
                  "runtime": "process",
                  "status": "running",
                  "limits": {
                    "cpu_millis": 750,
                    "memory_mib": 1024,
                    "disk_mib": 1024,
                    "timeout_seconds": 120
                  },
                  "created_at": "2025-10-18T12:34:56Z",
                  "updated_at": "2025-10-18T12:34:56Z",
                  "last_started_at": "2025-10-18T12:35:05Z",
                  "last_stopped_at": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 'runner' already exists in namespace 'demo'"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sandboxes/{id}/exec": {
      "post": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "Execute a command inside a sandbox",
        "operationId": "execSandbox",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecRequest"
              },
              "example": {
                "command": "python",
                "args": [
                  "-c",
                  "print('hello')"
                ],
                "stdin": null,
                "timeout_ms": 2000
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Execution result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecResponse"
                },
                "example": {
                  "exit_code": 0,
                  "stdout": "hello\n",
                  "stderr": "",
                  "duration_ms": 42,
                  "timed_out": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sandboxes/{id}/stop": {
      "post": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "Stop a sandbox",
        "operationId": "stopSandbox",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sandbox stopped"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 'runner' already exists in namespace 'demo'"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sandboxes/{id}": {
      "delete": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "Delete a sandbox",
        "operationId": "deleteSandbox",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sandbox deleted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sandboxes/{id}/executions": {
      "get": {
        "tags": [
          "Sandboxes"
        ],
        "summary": "List recent executions",
        "operationId": "listSandboxExecutions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Maximum number of execution records (default 20)."
          }
        ],
        "responses": {
          "200": {
            "description": "Execution history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionRecord"
                  }
                },
                "example": [
                  {
                    "command": "python",
                    "args": [
                      "-c",
                      "print('hello')"
                    ],
                    "executed_at": "2025-10-18T12:35:10Z",
                    "exit_code": 0,
                    "stdout": "hello\n",
                    "stderr": "",
                    "duration_ms": 55,
                    "timed_out": false
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List registered models",
        "operationId": "listModels",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Model catalog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelRecord"
                  }
                },
                "example": [
                  {
                    "id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
                    "name": "phi-3",
                    "provider": "huggingface",
                    "version": "1.0.0",
                    "format": "gguf",
                    "source_uri": "https://example.com/models/phi-3.gguf",
                    "size_bytes": 1572864000,
                    "checksum_sha256": "78c41d07a64b5f02a9a4b7d31ce9d2c9b9c5cc8f86be9f4f8d0dca1f1d4f1234",
                    "stage": "ready",
                    "last_synced_at": "2025-10-18T13:00:00Z",
                    "created_at": "2025-10-18T12:45:00Z",
                    "updated_at": "2025-10-18T13:00:00Z",
                    "tags": [
                      "llm",
                      "instruction-tuned"
                    ],
                    "error_message": null
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Register a model artifact",
        "operationId": "registerModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterModelRequest"
              },
              "example": {
                "name": "phi-3",
                "provider": "huggingface",
                "version": "1.0.0",
                "format": "gguf",
                "source_uri": "https://example.com/models/phi-3.gguf",
                "tags": [
                  "llm",
                  "instruction-tuned"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Model registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelRecord"
                },
                "example": {
                  "id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
                  "name": "phi-3",
                  "provider": "huggingface",
                  "version": "1.0.0",
                  "format": "gguf",
                  "source_uri": "https://example.com/models/phi-3.gguf",
                  "size_bytes": 1572864000,
                  "checksum_sha256": "78c41d07a64b5f02a9a4b7d31ce9d2c9b9c5cc8f86be9f4f8d0dca1f1d4f1234",
                  "stage": "ready",
                  "last_synced_at": "2025-10-18T13:00:00Z",
                  "created_at": "2025-10-18T12:45:00Z",
                  "updated_at": "2025-10-18T13:00:00Z",
                  "tags": [
                    "llm",
                    "instruction-tuned"
                  ],
                  "error_message": null
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "namespace query parameter is required"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/models/{id}/refresh": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Refresh a model artifact",
        "operationId": "refreshModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelRecord"
                },
                "example": {
                  "id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
                  "name": "phi-3",
                  "provider": "huggingface",
                  "version": "1.0.0",
                  "format": "gguf",
                  "source_uri": "https://example.com/models/phi-3.gguf",
                  "size_bytes": 1572864000,
                  "checksum_sha256": "78c41d07a64b5f02a9a4b7d31ce9d2c9b9c5cc8f86be9f4f8d0dca1f1d4f1234",
                  "stage": "ready",
                  "last_synced_at": "2025-10-18T13:00:00Z",
                  "created_at": "2025-10-18T12:45:00Z",
                  "updated_at": "2025-10-18T13:00:00Z",
                  "tags": [
                    "llm",
                    "instruction-tuned"
                  ],
                  "error_message": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/models/{id}": {
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a model artifact",
        "operationId": "deleteModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Model deleted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/models/{id}/jobs": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List download jobs for a model",
        "operationId": "listModelJobs",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelJob"
                  }
                },
                "example": [
                  {
                    "id": "9a8c1d2e-3f45-4b67-8123-98bcf1122334",
                    "model_id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
                    "stage": "ready",
                    "progress": 1.0,
                    "started_at": "2025-10-18T12:46:00Z",
                    "finished_at": "2025-10-18T12:58:00Z",
                    "error_message": null
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/audit/events": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "List audit events",
        "operationId": "listAuditEvents",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 200
            },
            "description": "Maximum number of events (default 50)."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter for events recorded after this timestamp."
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter for events recorded before this timestamp."
          }
        ],
        "responses": {
          "200": {
            "description": "Audit events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditEvent"
                  }
                },
                "example": [
                  {
                    "id": "5e0c1b7d-2c8f-4fe2-9d8c-7b5c6a4d3f2e",
                    "namespace": null,
                    "actor": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                    "event_type": "model.registered",
                    "recorded_at": "2025-10-18T12:58:05Z",
                    "payload": {
                      "model_id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
                      "name": "phi-3",
                      "provider": "huggingface",
                      "version": "1.0.0",
                      "stage": "ready"
                    },
                    "signature_valid": null
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "namespace query parameter is required"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/keys": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Issue an API key",
        "operationId": "issueKey",
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyRequest"
              },
              "example": {
                "scope": {
                  "type": "namespace",
                  "namespace": "demo"
                },
                "rate_limit": 100,
                "ttl_seconds": 2592000
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API key issued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedKeyResponse"
                },
                "example": {
                  "token": "bkg_demo_abcdefghijklmno",
                  "info": {
                    "id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                    "scope": {
                      "type": "namespace",
                      "namespace": "demo"
                    },
                    "rate_limit": 100,
                    "created_at": "2025-10-18T12:00:00Z",
                    "last_used_at": null,
                    "expires_at": "2025-11-17T12:00:00Z",
                    "key_prefix": "bkg_demo_abcd",
                    "rotated_from": null,
                    "rotated_at": null
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List issued API keys",
        "operationId": "listKeys",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Known API keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyInfo"
                  }
                },
                "example": [
                  {
                    "id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                    "scope": {
                      "type": "namespace",
                      "namespace": "demo"
                    },
                    "rate_limit": 100,
                    "created_at": "2025-10-18T12:00:00Z",
                    "last_used_at": null,
                    "expires_at": "2025-11-17T12:00:00Z",
                    "key_prefix": "bkg_demo_abcd",
                    "rotated_from": null,
                    "rotated_at": null
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/keys/rotate": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Rotate an API key",
        "operationId": "rotateKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RotateKeyRequest"
              },
              "example": {
                "key_id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                "rate_limit": 150,
                "ttl_seconds": 604800
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Key rotated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RotatedKeyResponse"
                },
                "example": {
                  "token": "bkg_demo_rotatedtoken",
                  "info": {
                    "id": "5f86a0ef-55c0-4f50-a1e9-b85a2b3db0fe",
                    "scope": {
                      "type": "namespace",
                      "namespace": "demo"
                    },
                    "rate_limit": 150,
                    "created_at": "2025-10-18T12:30:00Z",
                    "last_used_at": null,
                    "expires_at": "2025-10-25T12:30:00Z",
                    "key_prefix": "bkg_demo_rot",
                    "rotated_from": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                    "rotated_at": "2025-10-18T12:30:00Z"
                  },
                  "previous": {
                    "id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                    "scope": {
                      "type": "namespace",
                      "namespace": "demo"
                    },
                    "rate_limit": 100,
                    "created_at": "2025-09-10T09:00:00Z",
                    "last_used_at": "2025-10-18T12:29:58Z",
                    "expires_at": null,
                    "key_prefix": "bkg_demo_abcd",
                    "rotated_from": null,
                    "rotated_at": "2025-10-18T12:30:00Z"
                  },
                  "webhook": {
                    "event_id": "6b4dc7a8-1e5a-4cfa-a2e2-f9d4f2b1c90c",
                    "signature": "BASE64_HMAC",
                    "payload": {
                      "event": "key.rotated",
                      "key_id": "5f86a0ef-55c0-4f50-a1e9-b85a2b3db0fe",
                      "previous_key_id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                      "rotated_at": "2025-10-18T12:30:00Z",
                      "scope": {
                        "type": "namespace",
                        "namespace": "demo"
                      },
                      "owner": "demo",
                      "key_prefix": "bkg_demo_rot"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "rotation webhook secret is not configured"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/keys/rotated": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify rotation webhook signature",
        "operationId": "verifyRotationWebhook",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "X-Cave-Webhook-Signature",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Base64 encoded HMAC-SHA256 signature of the payload."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RotationWebhookPayload"
              },
              "example": {
                "event": "key.rotated",
                "key_id": "5f86a0ef-55c0-4f50-a1e9-b85a2b3db0fe",
                "previous_key_id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
                "rotated_at": "2025-10-18T12:30:00Z",
                "scope": {
                  "type": "namespace",
                  "namespace": "demo"
                },
                "owner": "demo",
                "key_prefix": "bkg_demo_rot"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Signature accepted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/keys/{id}": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Revoke an API key",
        "operationId": "revokeKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Key revoked"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "missing Authorization bearer token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "insufficient permissions for requested scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "sandbox 9f9c... not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "unexpected internal error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Token"
      }
    },
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Human readable error message."
          }
        },
        "example": {
          "error": "sandbox 123 not found"
        }
      },
      "SandboxLimits": {
        "type": "object",
        "required": [
          "cpu_millis",
          "memory_mib",
          "disk_mib",
          "timeout_seconds"
        ],
        "properties": {
          "cpu_millis": {
            "type": "integer",
            "format": "int32",
            "description": "CPU time slice in milli-CPUs."
          },
          "memory_mib": {
            "type": "integer",
            "format": "int64",
            "description": "Memory limit in MiB."
          },
          "disk_mib": {
            "type": "integer",
            "format": "int64",
            "description": "Ephemeral disk limit in MiB."
          },
          "timeout_seconds": {
            "type": "integer",
            "format": "int32",
            "description": "Execution timeout in seconds."
          }
        }
      },
      "SandboxResponse": {
        "type": "object",
        "required": [
          "id",
          "namespace",
          "name",
          "runtime",
          "status",
          "limits",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "runtime": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Current sandbox lifecycle state."
          },
          "limits": {
            "$ref": "#/components/schemas/SandboxLimits"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_started_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_stopped_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "example": {
          "id": "9f9c9872-2d9c-4c25-9c36-4e45be927834",
          "namespace": "demo",
          "name": "runner",
          "runtime": "process",
          "status": "created",
          "limits": {
            "cpu_millis": 750,
            "memory_mib": 1024,
            "disk_mib": 1024,
            "timeout_seconds": 120
          },
          "created_at": "2025-10-18T12:34:56Z",
          "updated_at": "2025-10-18T12:34:56Z",
          "last_started_at": null,
          "last_stopped_at": null
        }
      },
      "CreateSandboxLimits": {
        "type": "object",
        "properties": {
          "cpu_millis": {
            "type": "integer",
            "format": "int32"
          },
          "memory_mib": {
            "type": "integer",
            "format": "int64"
          },
          "disk_mib": {
            "type": "integer",
            "format": "int64"
          },
          "timeout_seconds": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Optional overrides for namespace defaults."
      },
      "CreateSandboxRequest": {
        "type": "object",
        "required": [
          "namespace",
          "name"
        ],
        "properties": {
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "runtime": {
            "type": "string",
            "description": "Sandbox runtime identifier (defaults to process)."
          },
          "limits": {
            "$ref": "#/components/schemas/CreateSandboxLimits"
          }
        },
        "example": {
          "namespace": "demo",
          "name": "runner",
          "runtime": "process",
          "limits": {
            "cpu_millis": 750,
            "memory_mib": 1024,
            "disk_mib": 1024,
            "timeout_seconds": 120
          }
        }
      },
      "ExecRequest": {
        "type": "object",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Command arguments."
          },
          "stdin": {
            "type": "string",
            "description": "Optional STDIN payload."
          },
          "timeout_ms": {
            "type": "integer",
            "format": "int64",
            "description": "Optional execution timeout in milliseconds."
          }
        },
        "example": {
          "command": "python",
          "args": [
            "-c",
            "print('hello')"
          ],
          "stdin": null,
          "timeout_ms": 2000
        }
      },
      "ExecResponse": {
        "type": "object",
        "required": [
          "duration_ms",
          "timed_out"
        ],
        "properties": {
          "exit_code": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stdout": {
            "type": "string",
            "nullable": true
          },
          "stderr": {
            "type": "string",
            "nullable": true
          },
          "duration_ms": {
            "type": "integer",
            "format": "int64"
          },
          "timed_out": {
            "type": "boolean"
          }
        },
        "example": {
          "exit_code": 0,
          "stdout": "hello\n",
          "stderr": "",
          "duration_ms": 42,
          "timed_out": false
        }
      },
      "ExecutionRecord": {
        "type": "object",
        "required": [
          "command",
          "args",
          "executed_at",
          "duration_ms",
          "timed_out"
        ],
        "properties": {
          "command": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "executed_at": {
            "type": "string",
            "format": "date-time"
          },
          "exit_code": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stdout": {
            "type": "string",
            "nullable": true
          },
          "stderr": {
            "type": "string",
            "nullable": true
          },
          "duration_ms": {
            "type": "integer",
            "format": "int64"
          },
          "timed_out": {
            "type": "boolean"
          }
        },
        "example": {
          "command": "python",
          "args": [
            "-c",
            "print('hello')"
          ],
          "executed_at": "2025-10-18T12:35:10Z",
          "exit_code": 0,
          "stdout": "hello\n",
          "stderr": "",
          "duration_ms": 55,
          "timed_out": false
        }
      },
      "ModelStage": {
        "type": "string",
        "enum": [
          "unknown",
          "registered",
          "queued",
          "downloading",
          "verifying",
          "ready",
          "failed"
        ],
        "description": "Lifecycle stage of a model artifact."
      },
      "RegisterModelRequest": {
        "type": "object",
        "required": [
          "name",
          "provider",
          "version",
          "format",
          "source_uri"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "source_uri": {
            "type": "string",
            "format": "uri"
          },
          "checksum_sha256": {
            "type": "string",
            "nullable": true
          },
          "size_bytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional labels applied to the model."
          }
        },
        "example": {
          "name": "phi-3",
          "provider": "huggingface",
          "version": "1.0.0",
          "format": "gguf",
          "source_uri": "https://example.com/models/phi-3.gguf",
          "tags": [
            "llm",
            "instruction-tuned"
          ]
        }
      },
      "ModelRecord": {
        "type": "object",
        "required": [
          "id",
          "name",
          "provider",
          "version",
          "format",
          "source_uri",
          "stage",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "source_uri": {
            "type": "string",
            "format": "uri"
          },
          "size_bytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "checksum_sha256": {
            "type": "string",
            "nullable": true
          },
          "stage": {
            "$ref": "#/components/schemas/ModelStage"
          },
          "last_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "nullable": true
          }
        },
        "example": {
          "id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
          "name": "phi-3",
          "provider": "huggingface",
          "version": "1.0.0",
          "format": "gguf",
          "source_uri": "https://example.com/models/phi-3.gguf",
          "size_bytes": 1572864000,
          "checksum_sha256": "78c41d07a64b5f02a9a4b7d31ce9d2c9b9c5cc8f86be9f4f8d0dca1f1d4f1234",
          "stage": "ready",
          "last_synced_at": "2025-10-18T13:00:00Z",
          "created_at": "2025-10-18T12:45:00Z",
          "updated_at": "2025-10-18T13:00:00Z",
          "tags": [
            "llm",
            "instruction-tuned"
          ],
          "error_message": null
        }
      },
      "ModelJob": {
        "type": "object",
        "required": [
          "id",
          "model_id",
          "stage",
          "progress",
          "started_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "model_id": {
            "type": "string",
            "format": "uuid"
          },
          "stage": {
            "$ref": "#/components/schemas/ModelStage"
          },
          "progress": {
            "type": "number",
            "format": "float"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "nullable": true
          }
        },
        "example": {
          "id": "9a8c1d2e-3f45-4b67-8123-98bcf1122334",
          "model_id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
          "stage": "ready",
          "progress": 1.0,
          "started_at": "2025-10-18T12:46:00Z",
          "finished_at": "2025-10-18T12:58:00Z",
          "error_message": null
        }
      },
      "AuditEvent": {
        "type": "object",
        "required": [
          "id",
          "event_type",
          "recorded_at",
          "payload"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "actor": {
            "type": "string",
            "nullable": true
          },
          "event_type": {
            "type": "string"
          },
          "recorded_at": {
            "type": "string",
            "format": "date-time"
          },
          "payload": {
            "type": "object",
            "additionalProperties": true
          },
          "signature_valid": {
            "type": "boolean",
            "nullable": true
          }
        },
        "example": {
          "id": "5e0c1b7d-2c8f-4fe2-9d8c-7b5c6a4d3f2e",
          "namespace": null,
          "actor": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
          "event_type": "model.registered",
          "recorded_at": "2025-10-18T12:58:05Z",
          "payload": {
            "model_id": "8a87f3c7-5d2b-49b6-9b77-bef345b4c6f1",
            "name": "phi-3",
            "provider": "huggingface",
            "version": "1.0.0",
            "stage": "ready"
          },
          "signature_valid": null
        }
      },
      "CreateKeyScope": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "admin"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "namespace"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "namespace"
                ]
              },
              "namespace": {
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "CreateKeyRequest": {
        "type": "object",
        "required": [
          "scope"
        ],
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/CreateKeyScope"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int32",
            "description": "Requests per minute (defaults to 100)."
          },
          "ttl_seconds": {
            "type": "integer",
            "format": "int64",
            "description": "Optional time-to-live for the key."
          }
        },
        "example": {
          "scope": {
            "type": "namespace",
            "namespace": "demo"
          },
          "rate_limit": 100,
          "ttl_seconds": 2592000
        }
      },
      "KeyScope": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "admin"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "namespace"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "namespace"
                ]
              },
              "namespace": {
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "KeyInfo": {
        "type": "object",
        "required": [
          "id",
          "scope",
          "rate_limit",
          "created_at",
          "key_prefix"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "scope": {
            "$ref": "#/components/schemas/KeyScope"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "key_prefix": {
            "type": "string",
            "description": "Truncated token prefix for audit displays."
          },
          "rotated_from": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "rotated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "example": {
          "id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
          "scope": {
            "type": "namespace",
            "namespace": "demo"
          },
          "rate_limit": 100,
          "created_at": "2025-10-18T12:00:00Z",
          "last_used_at": null,
          "expires_at": "2025-11-17T12:00:00Z",
          "key_prefix": "bkg_demo_abcd",
          "rotated_from": null,
          "rotated_at": null
        }
      },
      "RotateKeyRequest": {
        "type": "object",
        "required": [
          "key_id"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "format": "uuid"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "Optional override for the new key's rate limit."
          },
          "ttl_seconds": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Optional TTL for the rotated key in seconds."
          }
        },
        "example": {
          "key_id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
          "rate_limit": 150,
          "ttl_seconds": 604800
        }
      },
      "RotationWebhookPayload": {
        "type": "object",
        "required": [
          "event",
          "key_id",
          "previous_key_id",
          "rotated_at",
          "scope",
          "owner",
          "key_prefix"
        ],
        "properties": {
          "event": {
            "type": "string"
          },
          "key_id": {
            "type": "string",
            "format": "uuid"
          },
          "previous_key_id": {
            "type": "string",
            "format": "uuid"
          },
          "rotated_at": {
            "type": "string",
            "format": "date-time"
          },
          "scope": {
            "$ref": "#/components/schemas/KeyScope"
          },
          "owner": {
            "type": "string"
          },
          "key_prefix": {
            "type": "string"
          }
        },
        "example": {
          "event": "key.rotated",
          "key_id": "5f86a0ef-55c0-4f50-a1e9-b85a2b3db0fe",
          "previous_key_id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
          "rotated_at": "2025-10-18T12:30:00Z",
          "scope": {
            "type": "namespace",
            "namespace": "demo"
          },
          "owner": "demo",
          "key_prefix": "bkg_demo_rot"
        }
      },
      "RotationWebhookNotification": {
        "type": "object",
        "required": [
          "event_id",
          "signature",
          "payload"
        ],
        "properties": {
          "event_id": {
            "type": "string",
            "format": "uuid"
          },
          "signature": {
            "type": "string",
            "description": "Base64 encoded HMAC signature."
          },
          "payload": {
            "$ref": "#/components/schemas/RotationWebhookPayload"
          }
        }
      },
      "RotatedKeyResponse": {
        "type": "object",
        "required": [
          "token",
          "info",
          "previous",
          "webhook"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "info": {
            "$ref": "#/components/schemas/KeyInfo"
          },
          "previous": {
            "$ref": "#/components/schemas/KeyInfo"
          },
          "webhook": {
            "$ref": "#/components/schemas/RotationWebhookNotification"
          }
        },
        "example": {
          "token": "bkg_demo_rotatedtoken",
          "info": {
            "id": "5f86a0ef-55c0-4f50-a1e9-b85a2b3db0fe",
            "scope": {
              "type": "namespace",
              "namespace": "demo"
            },
            "rate_limit": 150,
            "created_at": "2025-10-18T12:30:00Z",
            "last_used_at": null,
            "expires_at": "2025-10-25T12:30:00Z",
            "key_prefix": "bkg_demo_rot",
            "rotated_from": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
            "rotated_at": "2025-10-18T12:30:00Z"
          },
          "previous": {
            "id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
            "scope": {
              "type": "namespace",
              "namespace": "demo"
            },
            "rate_limit": 100,
            "created_at": "2025-09-10T09:00:00Z",
            "last_used_at": "2025-10-18T12:29:58Z",
            "expires_at": null,
            "key_prefix": "bkg_demo_abcd",
            "rotated_from": null,
            "rotated_at": "2025-10-18T12:30:00Z"
          },
          "webhook": {
            "event_id": "6b4dc7a8-1e5a-4cfa-a2e2-f9d4f2b1c90c",
            "signature": "BASE64_HMAC",
            "payload": {
              "event": "key.rotated",
              "key_id": "5f86a0ef-55c0-4f50-a1e9-b85a2b3db0fe",
              "previous_key_id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
              "rotated_at": "2025-10-18T12:30:00Z",
              "scope": {
                "type": "namespace",
                "namespace": "demo"
              },
              "owner": "demo",
              "key_prefix": "bkg_demo_rot"
            }
          }
        }
      },
      "IssuedKeyResponse": {
        "type": "object",
        "required": [
          "token",
          "info"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Full bearer token. Shown once."
          },
          "info": {
            "$ref": "#/components/schemas/KeyInfo"
          }
        },
        "example": {
          "token": "bkg_demo_abcdefghijklmno",
          "info": {
            "id": "4b2a4d3a-4cbe-4b05-87a3-9528cdf6a1ed",
            "scope": {
              "type": "namespace",
              "namespace": "demo"
            },
            "rate_limit": 100,
            "created_at": "2025-10-18T12:00:00Z",
            "last_used_at": null,
            "expires_at": "2025-11-17T12:00:00Z",
            "key_prefix": "bkg_demo_abcd",
            "rotated_from": null,
            "rotated_at": null
          }
        }
      }
    }
  }
}
