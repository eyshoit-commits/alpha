name: BKG CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cargo fmt
        run: cargo fmt --all -- --check

      - name: Cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Cargo test
        run: cargo test --workspace

  schema-and-security:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Node (for ajv)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install schema tooling
        run: npm install -g ajv-cli @redocly/openapi-cli

      - name: Generate OpenAPI schema
        run: make api-schema

      - name: Ensure OpenAPI schema committed
        run: git diff --exit-code -- openapi.yaml

      - name: Validate OpenAPI schema
        run: openapi-cli validate openapi.yaml

      - name: Validate cave.yaml if present
        run: |
          if [ -f "cave.yaml" ]; then
            ajv validate -s schema/cave.schema.json -d cave.yaml
          else
            echo "cave.yaml not found, skipping schema validation."
          fi

      - name: Security tests placeholder
        run: |
          if [ -d "security" ]; then
            pip install -r security/requirements.txt
            pytest security/
          else
            echo "security/ directory missing; add tests to enable this step."
          fi

  web-ui:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install workspace dependencies
        working-directory: web
        run: npm install

      - name: Install Playwright browsers
        working-directory: web
        run: npx playwright install --with-deps

      - name: Lint admin app
        working-directory: web
        run: npm run lint -w admin

      - name: Lint namespace app
        working-directory: web
        run: npm run lint -w app

      - name: Build admin app
        working-directory: web/admin
        run: npm run build

      - name: Build namespace app
        working-directory: web/app
        run: npm run build

      - name: Run Playwright tests
        working-directory: web
        env:
          CI: "true"
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: web/playwright-report
          if-no-files-found: ignore

  supply-chain:
    runs-on: ubuntu-latest
    needs: [schema-and-security, web-ui]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Install Syft (SBOM)
        uses: anchore/sbom-action/download-syft@v0

      - name: Install SLSA generator
        uses: slsa-framework/slsa-github-generator/actions/installer@v1.10.0

      - name: Generate SBOM
        run: |
          syft packages dir:. -o json > sbom.json

      - name: Generate SLSA provenance (placeholder)
        run: |
          echo "TODO: invoke make slsa once implemented"

      - name: Sign SBOM when key is provided
        env:
          COSIGN_EXPERIMENTAL: "1"
          COSIGN_KEY_B64: ${{ secrets.COSIGN_KEY_B64 }}
        run: |
          if [ -n "${COSIGN_KEY_B64}" ]; then
            echo "Using cosign key from secrets"
            echo "${COSIGN_KEY_B64}" | base64 -d > cosign.key
            cosign sign-blob sbom.json --key cosign.key --output-signature sbom.sig
          elif [ -f "cosign.key" ]; then
            cosign sign-blob sbom.json --key cosign.key --output-signature sbom.sig
          else
            echo "Skipping cosign signing; provide COSIGN_KEY_B64 secret or cosign.key artifact to enable signing."
          fi
